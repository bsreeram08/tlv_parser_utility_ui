/**
 * EMV Tag Registry
 *
 * Provides a registry of standard EMV tags with their definitions
 * and utility functions to look up tag information.
 */

import { type EmvTag, TagClass, TagFormat } from "@/types/tlv";

/**
 * Map of tag IDs to their definitions
 */
const tagRegistry: Map<string, EmvTag> = new Map();

/**
 * Register standard EMV tags
 * Source: EMV 4.4 Book 3 and EMV Contactless Specifications
 */
function registerStandardTags(): void {
  const standardTags: EmvTag[] = [
    {
      id: "82",
      name: "Application Interchange Profile",
      description:
        "Indicates the capabilities of the card to support specific functions in the application",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 2,
    },
    {
      id: "84",
      name: "Dedicated File (DF) Name",
      description:
        "Identifies the name of the DF as described in ISO/IEC 7816-4",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      minLength: 5,
      maxLength: 16,
    },
    {
      id: "95",
      name: "Terminal Verification Results",
      description:
        "Status of the different functions as seen from the terminal",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 5,
    },
    {
      id: "9A",
      name: "Transaction Date",
      description: "Local date that the transaction was authorized",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 3,
    },
    {
      id: "9C",
      name: "Transaction Type",
      description: "Indicates the type of financial transaction",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 1,
    },
    {
      id: "5F2A",
      name: "Transaction Currency Code",
      description:
        "Indicates the currency code of the transaction according to ISO 4217",
      format: TagFormat.PRIMITIVE,
      class: TagClass.APPLICATION,
      fixedLength: 2,
    },
    {
      id: "5F34",
      name: "Application Primary Account Number (PAN) Sequence Number",
      description: "Identifies and differentiates cards with the same PAN",
      format: TagFormat.PRIMITIVE,
      class: TagClass.APPLICATION,
      fixedLength: 1,
    },
    {
      id: "9F02",
      name: "Amount, Authorized (Numeric)",
      description:
        "Authorized amount of the transaction (excluding adjustments)",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 6,
    },
    {
      id: "9F03",
      name: "Amount, Other (Numeric)",
      description: "Secondary amount associated with the transaction",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 6,
    },
    {
      id: "9F06",
      name: "Application Identifier (AID) - Terminal",
      description: "Identifies the application as described in ISO/IEC 7816-5",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      minLength: 5,
      maxLength: 16,
    },
    {
      id: "9F09",
      name: "Application Version Number",
      description:
        "Version number assigned by the payment system for the application",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 2,
    },
    {
      id: "9F10",
      name: "Issuer Application Data",
      description:
        "Contains proprietary application data for transmission to the issuer",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      minLength: 0,
      maxLength: 32,
    },
    {
      id: "9F26",
      name: "Application Cryptogram",
      description:
        "Cryptogram generated by the card for transaction validation",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 8,
    },
    {
      id: "9F27",
      name: "Cryptogram Information Data",
      description:
        "Indicates the type of cryptogram and the actions to be performed by the terminal",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 1,
    },
    {
      id: "9F36",
      name: "Application Transaction Counter",
      description: "Counter maintained by the application in the card",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 2,
    },
    {
      id: "9F37",
      name: "Unpredictable Number",
      description:
        "Random number generated by the terminal for transaction freshness",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      fixedLength: 4,
    },
    {
      id: "6F",
      name: "File Control Information (FCI) Template",
      description: "Template containing FCI data",
      format: TagFormat.CONSTRUCTED,
      class: TagClass.APPLICATION,
      minLength: 0,
      maxLength: 252,
    },
    {
      id: "70",
      name: "Record Template",
      description: "Template for a data record",
      format: TagFormat.CONSTRUCTED,
      class: TagClass.APPLICATION,
      minLength: 0,
      maxLength: 252,
    },
    {
      id: "77",
      name: "Response Message Template Format 2",
      description: "Contains the format 2 response message template",
      format: TagFormat.CONSTRUCTED,
      class: TagClass.CONTEXT_SPECIFIC,
      minLength: 0,
      maxLength: 252,
    },
    {
      id: "9F4C",
      name: "ICC Dynamic Number",
      description:
        "Time-variant number generated by the ICC, to be captured by the terminal",
      format: TagFormat.PRIMITIVE,
      class: TagClass.CONTEXT_SPECIFIC,
      minLength: 2,
      maxLength: 8,
    },
  ];

  // Register all tags in the registry
  standardTags.forEach((tag) => {
    tagRegistry.set(tag.id, tag);
  });
}

// Initialize the registry with standard tags
registerStandardTags();

/**
 * Get information about a specific tag
 *
 * @param tagId - Hexadecimal tag ID
 * @returns Tag information or undefined if not found
 */
export function getTagInfo(tagId: string): EmvTag | undefined {
  return tagRegistry.get(tagId);
}

/**
 * Register a custom tag in the registry
 *
 * @param tag - Tag definition to register
 * @returns True if registered successfully, false if already exists
 */
export function registerTag(tag: EmvTag): boolean {
  if (tagRegistry.has(tag.id)) {
    return false;
  }

  tagRegistry.set(tag.id, tag);
  return true;
}

/**
 * Get all registered tags
 *
 * @returns Array of all registered tags
 */
export function getAllTags(): EmvTag[] {
  return Array.from(tagRegistry.values());
}

/**
 * Check if a tag is registered
 *
 * @param tagId - Hexadecimal tag ID
 * @returns True if the tag is registered
 */
export function isTagRegistered(tagId: string): boolean {
  return tagRegistry.has(tagId);
}
